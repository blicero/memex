# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2023-10-23 21:55:13 krylon>
#
#+TAGS: go(g) internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

Memex is an application to create an index over a collection of
images, trying to extract any text from the images to use in the
index.

* Clock
  #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
  #+CAPTION: Clock summary at [2023-10-23 Mo 21:54]
  | Headline                 | Time       |         |      |
  |--------------------------+------------+---------+------|
  | *Total time*             | *2d 13:32* |         |      |
  |--------------------------+------------+---------+------|
  | *Components [4/6]*       | *2d 13:32* |         |      |
  | \_  /Common [0/0]/       |            | /2:29/  |      |
  | \_  /Scanner [1/2]/      |            | /7:32/  |      |
  | \_    Refresh            |            |         | 0:49 |
  | \_    Observe timestamps |            |         | 0:40 |
  | \_  /Reader [1/1]/       |            | /5:43/  |      |
  | \_    tesserocr          |            |         | 1:24 |
  | \_  /Database [1/1]/     |            | /21:36/ |      |
  | \_  /CLI [0/0]/          |            | /4:16/  |      |
  | \_  /Gui [1/2]/          |            | /19:56/ |      |
  | \_    Make me pretty     |            |         | 4:39 |
  | \_    Context clues      |            |         | 3:12 |
  #+END:
* Components [4/6]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
** Common [0/0]
   :LOGBOOK:
   CLOCK: [2023-10-07 Sa 16:48]--[2023-10-07 Sa 18:49] =>  2:01
   CLOCK: [2023-10-07 Sa 12:20]--[2023-10-07 Sa 12:48] =>  0:28
   :END:
** Scanner [1/2]
   :LOGBOOK:
   CLOCK: [2023-10-04 Mi 17:53]--[2023-10-04 Mi 19:53] =>  2:00
   CLOCK: [2023-09-30 Sa 18:15]--[2023-09-30 Sa 22:18] =>  4:03
   :END:
*** TODO Refresh
    :LOGBOOK:
    CLOCK: [2023-10-23 Mo 21:05]--[2023-10-23 Mo 21:54] =>  0:49
    CLOCK: [2023-10-23 Mo 20:33]--[2023-10-23 Mo 20:33] =>  0:00
    :END:
*** DONE Observe timestamps
    CLOSED: [2023-10-14 Sa 23:59]
    :LOGBOOK:
    CLOCK: [2023-10-14 Sa 19:10]--[2023-10-14 Sa 19:31] =>  0:21
    CLOCK: [2023-10-14 Sa 18:30]--[2023-10-14 Sa 18:49] =>  0:19
    :END:
    I store timestamps alongside the image in the database. I should check if
    an image is in the database already and up to date before handing it to
    the Reader.
** Reader [1/1]
   :LOGBOOK:
   CLOCK: [2023-10-11 Mi 17:50]--[2023-10-11 Mi 17:52] =>  0:02
   CLOCK: [2023-10-04 Mi 20:19]--[2023-10-05 Do 00:36] =>  4:17
   :END:
   Okay, the API offered by pytesseract is fortunately stupid easy.
   ... However, it turns out pytesseract is not available on Debian, and I do
   not want to deal with virtualenv just yet (it's definitely on my todo list,
   though).
   Furthermore, on my desktop machine, I get errors when running several
   worker threads. I assume this is because tesseract uses the nVidia GPU, and
   I furthermore assume that having several processes do this at once does not
   work super well.
*** DONE tesserocr
    CLOSED: [2023-10-12 Do 20:19]
    :LOGBOOK:
    CLOCK: [2023-10-11 Mi 17:52]--[2023-10-11 Mi 19:16] =>  1:24
    :END:
** Database [1/1]
   :LOGBOOK:
   CLOCK: [2023-10-23 Mo 11:37]--[2023-10-23 Mo 12:35] =>  0:58
   CLOCK: [2023-10-21 Sa 15:40]--[2023-10-21 Sa 16:48] =>  1:08
   CLOCK: [2023-10-14 Sa 14:15]--[2023-10-14 Sa 14:23] =>  0:08
   CLOCK: [2023-10-12 Do 14:50]--[2023-10-12 Do 20:16] =>  5:26
   CLOCK: [2023-10-08 So 21:05]--[2023-10-08 So 21:58] =>  0:53
   CLOCK: [2023-10-07 Sa 19:52]--[2023-10-07 Sa 22:52] =>  3:00
   CLOCK: [2023-10-06 Fr 19:25]--[2023-10-07 Sa 00:19] =>  4:54
   CLOCK: [2023-10-05 Do 19:37]--[2023-10-06 Fr 00:46] =>  5:09
   :END:
   Coming back from years of golang, I am disappointed Python's dbapi won't
   let me explicitly prepare queries. In Go, I used to test my SQL queries for
   syntax errors this way, without actually touching the database.
*** DONE Cleanup
    CLOSED: [2023-10-23 Mo 21:04]
** CLI [0/0]
   :LOGBOOK:
   CLOCK: [2023-10-10 Di 17:49]--[2023-10-10 Di 22:05] =>  4:16
   :END:
** Gui [1/2]
   :LOGBOOK:
   CLOCK: [2023-10-22 So 20:21]--[2023-10-22 So 21:35] =>  1:14
   CLOCK: [2023-10-22 So 16:44]--[2023-10-22 So 18:53] =>  2:09
   CLOCK: [2023-10-19 Do 18:31]--[2023-10-19 Do 19:30] =>  0:59
   CLOCK: [2023-10-18 Mi 17:40]--[2023-10-18 Mi 21:03] =>  3:23
   CLOCK: [2023-10-16 Mo 22:02]--[2023-10-17 Di 01:55] =>  3:53
   CLOCK: [2023-10-15 So 17:59]--[2023-10-15 So 18:26] =>  0:27
   :END:
   I want a GUI, too, and I'll use gtk3.
   ... Or *maybe* it's a good opportunity to look into Qt?
   Okay, so a rudimentary GUI works - it was surprisingly easy, actually. Now
   I wonder if I could add some more functionality. Context menu, something
   like that?
*** TODO Make me pretty
    :LOGBOOK:
    CLOCK: [2023-10-20 Fr 20:15]--[2023-10-21 Sa 00:54] =>  4:39
    :END:
*** DONE Context clues
    CLOSED: [2023-10-20 Fr 20:14]
    :LOGBOOK:
    CLOCK: [2023-10-20 Fr 18:05]--[2023-10-20 Fr 19:49] =>  1:44
    CLOCK: [2023-10-20 Fr 12:13]--[2023-10-20 Fr 13:41] =>  1:28
    :END:
* Bugs [0/0]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:


